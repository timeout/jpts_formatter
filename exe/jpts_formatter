#!/usr/bin/env ruby

require 'jpts_formatter'
require 'optparse'

options = Hash.new
op = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "
    Generate a FO file from a JPTS file.

    Usage: #{executable_name} [options] <jpts_article> <output>
  "
  opts.separator ''

  opts.on('-g', '--graphics-dir [directory]', String, 
          'relative path to graphics directory') do |directory|
    options[:graphics_dir] = directory
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version") do
    puts JPTSFormatter::VERSION
    exit
  end
end
op.parse!(ARGV)

=begin
  jpts_formatter <input> <output>
  jpts_formatter <output>             # input STDIN
  jpts_formatter <input> -            # output STDOUT
  jpts_formatter                      # pass through aka STDIN â†’ STDOUT
=end

output_filename = input_filename = nil
case ARGV.size
when 0
  if STDIN.tty?
    puts op.help
    exit 1
  end
when 1
  if STDIN.tty?
    puts op.help
    exit 1
  end
  output_filename = ARGV[0]
when 2
  input_filename = ARGV[0]
  output_filename = ARGV[1]
else
  puts op.help
  exit 1
end

if input_filename.nil?
  output = JPTSFormatter.format STDIN, options[:graphics_dir]
else
  input_handle = File.open input_filename
  output = JPTSFormatter.format input_handle, options[:graphics_dir]
  input_handle.close
end

if output_filename.nil? or output_filename == '-'
  STDOUT.puts output
else
  File.open(output_filename, 'w') { |file| file.write output }
end

# case ARGV.size
# when 1
#   # read_file(STDIN, lines)
#   output_filename = ARGV[0]
#   if output_filename == '-'
#     output = JPTSFormatter.format(STDIN)
#     STDOUT.puts output
#   else
#     output_path = Pathname(output_filename)
#     output_path.open('w') { |f| f.write(JPTSFormatter.format(STDIN)) }
#   end
# when 2
#   input_filename = ARGV[0]
#   input_path = Pathname.new(input_filename)
# 
#   output_filename = ARGV[1]
#   output_path = Pathname.new(output_filename)
# 
#   output = JPTSFormatter.format(input_path.open)
#   output_path.open('w') { |f| f.write output }
# else
#   puts "usage information"
# end
